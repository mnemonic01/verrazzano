// Copyright (c) 2021, 2022, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

def GIT_COMMIT_TO_USE
def VERRAZZANO_DEV_VERSION

def agentLabel = env.JOB_NAME.contains('master') ? "phxlarge" : "VM.Standard2.8"
def TESTS_FAILED = false
def tarfilePrefix="verrazzano_periodic_bfs"
def storeLocation=""
def branchSpecificSchedule = getCronSchedule()

// The job name from which the verrazzano_images file is available to be copied to this job
// We will copy over and make it part of the artifacts of the periodic job, available when we want to release a candidate
def verrazzanoImagesJobProjectName = "verrazzano-new-oci-dns-acceptance-tests"
def verrazzanoImagesFile = "verrazzano_images.txt"
def verrazzanoImagesBuildNumber = 0 // will be set to actual build number when the job is run

pipeline {
    options {
        skipDefaultCheckout true
        timestamps ()
    }

    agent {
       docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            registryCredentialsId 'ocir-pull-and-push-account'
            label "${agentLabel}"
        }
    }

    // triggers {
    //     cron(branchSpecificSchedule)
    // }

    parameters {
        booleanParam (
            description: 'Whether to trigger full tests for the verrazzano pipeline run',
            name: 'TRIGGER_FULL_TESTS',
            defaultValue: false)
        booleanParam (
            description: 'Whether the verrazzano pipeline should push images to OCIR',
            name: 'PUSH_TO_OCIR',
            defaultValue: false)
        booleanParam (
            description: 'Whether the verrazzano pipeline should wait for triggered tests',
            name: 'WAIT_FOR_TRIGGERED',
            defaultValue: false)
        booleanParam (
            description: 'Whether is a test run or not (run triggered tests or not)',
            name: 'TEST_RUN',
            defaultValue: true)
    }

    environment {
        IS_PERIODIC_PIPELINE = "true"
        OCIR_SCAN_COMPARTMENT = credentials('ocir-scan-compartment')
        OCIR_SCAN_TARGET = credentials('ocir-scan-target')
        OCIR_SCAN_REGISTRY = credentials('ocir-scan-registry')
        OCIR_SCAN_REPOSITORY_PATH = credentials('ocir-scan-repository-path')
        DOCKER_SCAN_CREDS = credentials('v8odev-ocir')

        OCI_CLI_AUTH="instance_principal"
        OCI_OS_NAMESPACE = credentials('oci-os-namespace')
        OCI_OS_BUCKET="verrazzano-builds"
        CLEAN_BRANCH_NAME = "${env.BRANCH_NAME.replace("/", "%2F")}"
        SERVICE_KEY = credentials('PAGERDUTY_SERVICE_KEY')
        RELEASABLE_IMAGES_OBJECT_STORE = "releasable-verrazzano-images.txt"
    }

    // This job runs against the latest stable master commit. That is defined as the last clean master build and test run whose
    // commit has been stored in object storage. This job will fetch that commit from master and run extended tests using that.
    // This job is NOT currently setup to run extended tests from other branches, if you need to run those extended jobs you will
    // need to run those against your branch individually.

    stages {
        stage('Clean workspace and checkout') {
            steps {
                sh """
                    echo "${NODE_LABELS}"
                    // there could be a race condition for this if the periodic job is running at the same time -- are bucket writes atomic wrt reads?
                    oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name ${CLEAN_BRANCH_NAME}/last-stable-commit.txt --file ${WORKSPACE}/last-stable-commit.txt
                """

                script {
                    def props = readProperties file: "${WORKSPACE}/last-stable-commit.txt"
                    GIT_COMMIT_TO_USE = props['git-commit']
                    echo "SCM checkout of ${GIT_COMMIT_TO_USE}"
                    def scmInfo = checkout([
                        $class: 'GitSCM',
                        branches: [[name: GIT_COMMIT_TO_USE]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
                    env.GIT_COMMIT = scmInfo.GIT_COMMIT
                    env.GIT_BRANCH = scmInfo.GIT_BRANCH
                    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
                    // If the commit we were handed is not what the SCM says we are using, fail
                    if (!env.GIT_COMMIT.equals(GIT_COMMIT_TO_USE)) {
                        error( "SCM didn't checkout the commit we expected. Expected: ${GIT_COMMIT_TO_USE}, Found: ${scmInfo.GIT_COMMIT}")
                    }
                }

                script {
                    try {
                        sh """
                            echo "${DOCKER_SCAN_CREDS_PSW}" | docker login ${env.OCIR_SCAN_REGISTRY} -u ${DOCKER_SCAN_CREDS_USR} --password-stdin
                        """
                    } catch(error) {
                        echo "docker login failed, retrying after sleep"
                        retry(4) {
                            sleep(30)
                            sh """
                            echo "${DOCKER_SCAN_CREDS_PSW}" | docker login ${env.OCIR_SCAN_REGISTRY} -u ${DOCKER_SCAN_CREDS_USR} --password-stdin
                            """
                        }
                    }
                }

                script {
                    def props = readProperties file: '.verrazzano-development-version'
                    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
                    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
                    // update the description with some meaningful info
                    currentBuild.description = SHORT_COMMIT_HASH + " : " + env.GIT_COMMIT + " : " + GIT_COMMIT_TO_USE
                    storeLocation="${CLEAN_BRANCH_NAME}-last-clean-periodic-test/${tarfilePrefix}.zip"
                }
            }
        }

        stage ('Update the BOM with BFS Images') {
            steps {
                script {
                    sh """
                        ci/scripts/create_bom_for_bfs_testing.sh ${env.GIT_COMMIT} ${SHORT_COMMIT_HASH} ${tarfilePrefix}
                    """
                }
            }
        }

        stage ('BFS Periodic Test Suites') {
            steps {
                script {
                    if (params.TEST_RUN.equals(true)) {
                        build job: "/verrazzano/${CLEAN_BRANCH_NAME}",
                            parameters: [
                                string(name: 'TRIGGER_FULL_TESTS', value: params.TRIGGER_FULL_TESTS),
                                string(name: 'PUSH_TO_OCIR', value: params.PUSH_TO_OCIR),
                                string(name: 'WAIT_FOR_TRIGGERED', value: params.WAIT_FOR_TRIGGERED)
                            ], wait: true
                    }
                }
            }
        }
    }

    post {
        // always {
        //     script {
        //         if (verrazzanoImagesBuildNumber > 0) {
        //             copyArtifacts(projectName: "${verrazzanoImagesJobProjectName}/${CLEAN_BRANCH_NAME}",
        //                     selector: specific("${verrazzanoImagesBuildNumber}"),
        //                     filter: verrazzanoImagesFile)
        //             sh """
        //                 OCI_CLI_AUTH="instance_principal" oci --region us-phoenix-1 os object put --force --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name ${CLEAN_BRANCH_NAME}/${RELEASABLE_IMAGES_OBJECT_STORE} --file ${verrazzanoImagesFile}
        //             """
        //         } else {
        //             println("Cannot copy ${verrazzanoImagesFile} from the project ${verrazzanoImagesJobProjectName} - no build number is available to copy from.")
        //         }
        //     }
        //     archiveArtifacts artifacts: "**/prerelease_validation.out,**/release_status.out,**/${verrazzanoImagesFile}", allowEmptyArchive: true
        // }
        // failure {
        //     script {
        //         if (isAlertingEnabled()) {
        //             if (isPagerDutyEnabled()) {
        //                 pagerduty(resolve: false, serviceKey: "$SERVICE_KEY",
        //                 incDescription: "Verrazzano Periodic Tests: ${env.JOB_NAME} - Failed",
        //                 incDetails: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}")
        //             }
        //             slackSend ( channel: "$SLACK_ALERT_CHANNEL", message: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}\n" )
        //             echo "done alerts"
        //         }
        //     }
        // }
        cleanup {
            deleteDir()
        }
    }
}

def isAlertingEnabled() {
    // this controls whether any alerting happens for these tests
    if (NOTIFY_PERIODIC_FAILURES.equals("true") && (env.BRANCH_NAME.equals("master") || env.BRANCH_NAME.equals("release-1.*"))) {
        echo "Alert notifications enabled for master"
        return true
    }
    return false
}

def isPagerDutyEnabled() {
    // this additionally controls whether PD alerts are enabled (note that you must also enable alerting in general as well if you want these)
    if (NOTIFY_PAGERDUTY_PERIODIC_FAILURES.equals("true")) {
        echo "Pager-Duty notifications enabled via global override setting"
        return true
    }
    return false
}

def getCronSchedule() {
    if (env.BRANCH_NAME.equals("master")) {
        // return "H */2 * * *"
        return "@daily"
    } else if (env.BRANCH_NAME.startsWith("release-1")) {
        return "@daily"
    }
    return ""
}
