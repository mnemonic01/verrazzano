// Copyright (c) 2021, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

pipeline {
    options {
        skipDefaultCheckout true
        timestamps ()
    }

    agent {
        docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            label 'internal'
        }
    }

    environment {
        DOCKER_CREDS = credentials('github-packages-credentials-rw')
        DOCKER_EMAIL = credentials('github-packages-email')
        DOCKER_REPO = 'ghcr.io'
        DOCKER_NAMESPACE = 'verrazzano'
        NETRC_FILE = credentials('netrc')
        OCR_CREDS = credentials('ocr-pull-and-push-account')
        OCR_REPO = 'container-registry.oracle.com'
        MAGE_PULL_SECRET = 'verrazzano-container-registry'
        GOPATH = '/home/opc/go'
        GO_REPO_PATH = "${GOPATH}/src/github.com/verrazzano"
        dev_lre_compartment_id = credentials('dev-lre-compartment-id')
        dev_lre_cluster_id = credentials('dev-lre-cluster-id')
        dev_lre_bastion_ip = credentials('dev-lre-bastion-ip')
        OCI_CLI_REGION = "us-ashburn-1"
        KUBECONFIG = "~/.kube/config"
        ssh_public_key_path = "~/.ssh/id_rsa.pub"
        ssh_private_key_path = "~/.ssh/id_rsa"
    }

    stages {
        stage('Clean workspace and checkout') {
            steps {
                sh """
                    echo "${NODE_LABELS}"
                """

                script {
                    checkout scm
                }
                sh """
                    cp -f "${NETRC_FILE}" $HOME/.netrc
                    chmod 600 $HOME/.netrc
                """

                script {
                    try {
                        sh """
                    echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                        """
                    } catch(error) {
                        echo "docker login failed, retrying after sleep"
                        retry(4) {
                            sleep(30)
                            sh """
                    echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                            """
                        }
                    }
                }
                script {
                    try {
                        sh """
                    echo "${OCR_CREDS_PSW}" | docker login -u ${OCR_CREDS_USR} ${OCR_REPO} --password-stdin
                        """
                    } catch(error) {
                        echo "OCR docker login failed, retrying after sleep"
                        retry(4) {
                            sleep(30)
                            sh """
                    echo "${OCR_CREDS_PSW}" | docker login -u ${OCR_CREDS_USR} ${OCR_REPO} --password-stdin
                            """
                        }
                    }
                }
                sh """
                    rm -rf ${GO_REPO_PATH}/verrazzano
                    mkdir -p ${GO_REPO_PATH}/verrazzano
                    tar cf - . | (cd ${GO_REPO_PATH}/verrazzano/ ; tar xf -)
                """

                script {
                    def props = readProperties file: '.verrazzano-development-version'
                    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
                    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
                    DOCKER_IMAGE_TAG = "${VERRAZZANO_DEV_VERSION}-${TIMESTAMP}-${SHORT_COMMIT_HASH}"
                }
            }
        }

        stage("create oci config file") {
            environment {
                OCI_CLI_AUTH="api_key"
                OCI_CLI_TENANCY = credentials('oci-dev-tenancy')
                OCI_CLI_USER = credentials('oci-dev-user-ocid')
                OCI_CLI_FINGERPRINT = credentials('oci-dev-api-key-fingerprint')
                OCI_CLI_KEY_FILE = credentials('oci-dev-api-key-file')
                OCI_REGION = "${env.OCI_CLI_REGION}"
            }
            steps {
                script{
                    sh """
                        mkdir -p ~/.oci
                        cp ${OCI_CLI_KEY_FILE} ~/.oci
                        ls -ls ~/.oci
                        cat ~/.oci/alm.pem
                        rm -rf ~/oci/config
                        {
                          echo '[DEFAULT]'
                          echo 'user=${OCI_CLI_USER}'
                          echo 'fingerprint=${OCI_CLI_FINGERPRINT}'
                          echo 'tenancy=${OCI_CLI_TENANCY}'
                          echo 'region=${OCI_CLI_REGION}'
                          echo 'key_file=~/.oci/alm.pem'
                        } >> ~/.oci/config
                    """
                }
            }
        }

        stage('Download kubeconfig') {
            steps {
                script {
                    sh """
                        mkdir -p ~/.kube
                        rm -rf ~/.kube/config
                        # get kubeconfig from OCI
                        oci ce cluster create-kubeconfig \
                        --cluster-id ${dev_lre_cluster_id} \
                        --file ~/.kube/config \
                        --region ${OCI_CLI_REGION} \
                        --token-version 2.0.0  \
                        --kube-endpoint PRIVATE_ENDPOINT
                    """
                }
            }
        }

        stage('call sh-keygen to create public and private keys') {
            steps {
                script {
                    sh """
                        # delete the key file if it exists
                        rm -f ~/.ssh/id_rsa*
                        # call ssh-keygen to create the keys
                        ssh-keygen -m PEM -N '' -f ~/.ssh/id_rsa
                        # export the ssh public key value for LRE cluster
                        export ssh_public_key_path=~/.ssh/id_rsa.pub
                        # export the ssh private key file for LRE cluster
                        export ssh_private_key_path=~/.ssh/id_rsa
                        ls -ls ~/.ssh
                    """
                }
            }
        }

        stage('set up ssh tunnel') {
            steps {
                script {
                    sh '''
                        echo "create ssh tunnel"
                        cd ${GO_REPO_PATH}/verrazzano/
                        ci/scripts/lre_setup_ssh_tunnel.sh
                        sed -i "s/server:.*/server: https://127.0.0.1:6443/g" $KUBECONFIG
                        echo "run kubectl get nodes"
                        kubectl get nodes
                    '''
                }
            }
        }

        stage('run kubectl to get nodes') {
            steps {
                script {
                    sh """
                        ls -ls ~/.kube
                        cat ~/.kube/config
                        echo "run kubectl get nodes"
                        kubectl get nodes
                        #kubectl get nodes > ${WORKSPACE}/verrazzano/verrazzano-lre-nodes.log --tail -1
                    """
                }
            }
        }
    }
}