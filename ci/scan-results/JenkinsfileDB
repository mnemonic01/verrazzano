// Copyright (c) 2021, 2022, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

pipeline {
    options {
        timestamps ()
    }

    agent {
       docker {
           image "${RUNNER_DOCKER_IMAGE}"
           args "${RUNNER_DOCKER_ARGS}"
           registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
           label 'internal'
       }
    }

    //triggers { cron("@daily") }

    parameters {
        string (name: 'SCAN_RESULTS_CSV_OBJECT_NAME',
                defaultValue: '',
                description: 'The object name in OCI object store, for the scan results CSV file',
                trim: true)
    }
    environment {
//        CLEAN_BRANCH_NAME = "${env.BRANCH_NAME.replace("/", "%2F")}"
//

        // OCI Object Storage info
        OCI_OS_NAMESPACE = credentials('oci-os-namespace')
        OCI_OS_SCAN_BUCKET = "verrazzano-scan-results"
        OCI_OS_REGION="us-phoenix-1"
//        OCIR_COMPARTMENT_ID = credentials('ocir-scan-compartment')
//        OCIR_SCAN_REGISTRY = credentials('ocir-scan-registry')
//        OCIR_REPOSITORY_BASE = credentials('ocir-scan-repository-path')
//        OCIR_PATH_FILTER = ".*"
//        DOCKER_SCAN_CREDS = credentials('v8odev-ocir')
//
//
//        GITHUB_ACCESS_TOKEN = credentials('github-api-token-release-process')
        MYSQL_CONNECT_PORT=3306
        MYSQL_LOGIN=credentials('deva-mysql-login')
        MYSQL_SCHEMA=credentials('deva-mysql-schema')
        ssh_public_key_path = "${WORKSPACE}/.ssh/id_rsa.pub"
        ssh_private_key_path = "${WORKSPACE}/.ssh/id_rsa"
        bastion_compartment_id = credentials('deva-v8odev-sandbox-compartment-id')
        bastion_session_target_ip = '10.196.0.119'
    }

    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    if (!params.SCAN_RESULTS_CSV_OBJECT_NAME) {
                        error('Parameter SCAN_RESULTS_CSV_OBJECT_NAME must be provided!')
                    }
                }
            }
        }

        stage('Download Scan Results') {
            environment {
                // CSV is retrieved from object store the non-dev tenancy
                OCI_CLI_TENANCY = credentials('oci-tenancy')
                OCI_CLI_USER = credentials('oci-user-ocid')
                OCI_CLI_FINGERPRINT = credentials('oci-api-key-fingerprint')
                OCI_CLI_KEY_FILE = credentials('oci-api-key')
                OCI_CLI_REGION = "us-phoenix-1"
            }
            steps {
                script {
                    sh """
                        oci --region $OCI_OS_REGION os object get --namespace ${OCI_OS_NAMESPACE} \
                            -bn ${OCI_OS_SCAN_BUCKET} --name ${params.SCAN_RESULTS_CSV_OBJECT_NAME} \
                            --file ${WORKSPACE}/scan_results.csv
                        tail -5 ${WORKSPACE}/scan_results.csv
                    """
                }
            }
        }

        stage('Setup MySQL Bastion Tunnel') {
            environment {
                // Database is in dev tenancy
                OCI_CLI_TENANCY = credentials('oci-dev-tenancy')
                OCI_CLI_USER = credentials('oci-dev-user-ocid')
                OCI_CLI_FINGERPRINT = credentials('oci-dev-api-key-fingerprint')
                OCI_CLI_KEY_FILE = credentials('oci-dev-api-key-file')
                OCI_CLI_REGION = "us-ashburn-1"
            }
            steps {
                script {
                    install_mysql_client()
                    generate_ssh_keys()
                    sh """
                      set +x
                      bastion_session_port=${MYSQL_CONNECT_PORT} ci/scripts/lre_setup_ssh_tunnel.sh
                    """
                }
            }
        }

        stage('Load Scan Results in DB') {
            steps {
                script {
                    sh """
                      # echo "select * from ${MYSQL_SCHEMA}.CONSOLIDATED_SCAN_RESULTS;" > select.sql
                      # --local-infile setting seems specific to the Linux mariadb client. 
                      # For other mysql clients use --load-data-local-dir=<dir name>
                      ls -l
                      sed -i "s|%CSVFILE%|${WORKSPACE}/scan_results.csv|g" ${WORKSPACE}/ci/scan-results/load_scan_results.sql
                      cat ${WORKSPACE}/ci/scan-results/load_scan_results.sql
                      mysql --local-infile \
                        -u ${MYSQL_LOGIN_USR} -p${MYSQL_LOGIN_PSW} -h 127.0.0.1 \
                        ${MYSQL_SCHEMA} < ${WORKSPACE}/ci/scan-results/load_scan_results.sql
                    """
                }
            }
        }
    }
}

def install_mysql_client() {
    sh "sudo yum install -y mysql"
}
def generate_ssh_keys() {
    sh """
      # delete the key files if they exist
      rm -f ${WORKSPACE}/.ssh/id_rsa*
      mkdir -p ${WORKSPACE}/.ssh
      # call ssh-keygen to create the keys
      ssh-keygen -m PEM -N '' -f ${ssh_private_key_path}
      ls -l ${WORKSPACE}/.ssh
    """
}